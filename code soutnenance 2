#include <Wire.h>
#include <RTClib.h>
#include <LedControl.h>
#include <EEPROM.h>
#include <U8g2lib.h>

// Broches et configuration
#define BUZZER_PIN 9
#define ULTRASONIC_TRIGGER 10
#define ULTRASONIC_ECHO 11
#define BTN_MODE 2
#define BTN_STOP 3

// Configuration LED Matrix
#define DIN_PIN 12
#define CS_PIN 7
#define CLK_PIN 13
#define MATRIX_COUNT 4

class DigiWake {
private:
    RTC_DS1307 rtc;
    LedControl ledMatrix;
    U8G2_SSD1306_128X64_NONAME_1_HW_I2C oled;
    
    // Paramètres de l'alarme
    DateTime alarmTime;
    bool alarmEnabled = false;
    int snoozeMinutes = 5;
    bool is12HourFormat = false;
    
    // Mélodies
    const int melody1[10][2] = {
        {262, 200}, {294, 200}, {330, 200}, 
        {349, 200}, {392, 200}, {440, 200}
    };
    
public:
    DigiWake() : 
        ledMatrix(DIN_PIN, CLK_PIN, CS_PIN, MATRIX_COUNT),
        oled(U8G2_R0, U8X8_PIN_NONE) {}
    
    void initialize() {
        Wire.begin();
        rtc.begin();
        
        // Configuration matrices LED
        for(int i = 0; i < MATRIX_COUNT; i++) {
            ledMatrix.shutdown(i, false);
            ledMatrix.setIntensity(i, 8);
            ledMatrix.clearDisplay(i);
        }
        
        // Configuration OLED
        oled.begin();
        oled.setFont(u8g2_font_ncenB08_tr);
        
        // Configuration boutons
        pinMode(BTN_MODE, INPUT_PULLUP);
        pinMode(BTN_STOP, INPUT_PULLUP);
        
        // Configuration capteur ultrason
        pinMode(ULTRASONIC_TRIGGER, OUTPUT);
        pinMode(ULTRASONIC_ECHO, INPUT);
    }
    
    void updateDisplay() {
        DateTime now = rtc.now();
        displayTimeOnMatrix(now);
        displayTimeOnOLED(now);
    }
    
    void checkAlarm() {
        DateTime now = rtc.now();
        if(alarmEnabled && now.hour() == alarmTime.hour() && 
           now.minute() == alarmTime.minute()) {
            triggerAlarm();
        }
    }
    
    void triggerAlarm() {
        playMelody(melody1);
        
        // Gestion snooze via capteur ultrason
        if(detectHandWave()) {
            snoozeAlarm();
        }
    }
    
    bool detectHandWave() {
        digitalWrite(ULTRASONIC_TRIGGER, LOW);
        delayMicroseconds(2);
        digitalWrite(ULTRASONIC_TRIGGER, HIGH);
        delayMicroseconds(10);
        digitalWrite(ULTRASONIC_TRIGGER, LOW);
        
        long duration = pulseIn(ULTRASONIC_ECHO, HIGH);
        int distance = duration * 0.034 / 2;
        
        return (distance < 20); // Main détectée à moins de 20 cm
    }
    
    void playMelody(const int melody[][2]) {
        for(int i = 0; i < 6; i++) {
            tone(BUZZER_PIN, melody[i][0], melody[i][1]);
            delay(melody[i][1]);
        }
        noTone(BUZZER_PIN);
    }
    
    void snoozeAlarm() {
        DateTime now = rtc.now();
        alarmTime = now + TimeSpan(0, 0, snoozeMinutes, 0);
    }
    
    void setup() {
        initialize();
        // Charger configuration de l'EEPROM
        loadConfiguration();
    }
    
    void loop() {
        updateDisplay();
        checkAlarm();
        handleButtons();
    }
    
    void handleButtons() {
        // Logique de changement de mode et de réglages
    }
    
    // Autres méthodes spécifiques à implémenter...
};

DigiWake reveilleMatin;

void setup() {
    reveilleMatin.setup();
}

void loop() {
    reveilleMatin.loop();
}
